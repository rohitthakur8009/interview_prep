"""
Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.



Example 1:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]
Example 2:

Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]
Example 3:

Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]


0,0 -> 2,2
0,1 -> 0,0
0,2 -> 0,1
1,0 -> 0,2


0,0,2-> 0, 2
0,1,2 ->

Constraints:

m == grid.length
n == grid[i].length
1 <= m <= 50
1 <= n <= 50
-1000 <= grid[i][j] <= 1000
0 <= k <= 100

Algorithm:
1. If k is greater than size of grid: k = k % size of grid
2. Initialize result with 0
3. Traverse all rows:
    Travers all columns:
        shift current element with index i, j to new row and column
        new row = (i + (j + k)/len(grid[0]) % len(grid)
        new column = (j + k) % len(grid[0])
"""

import math
from typing import List

def shiftGrid(grid: List[List[int]], k: int) -> List[List[int]]:
    k = k % (len(grid) * len(grid[0]))
    rowRotates = int(k/len(grid[0]))
    colRotates = int(k%len(grid[0]))

    if rowRotates == 0 and colRotates == 0:
        return grid

    if colRotates == 0:
        return grid[-rowRotates:] + grid[0: len(grid) - rowRotates]

    result = [[0] * len(grid[0]) for _ in grid]
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            row, col = (i + int((j +k)/len(grid[0]))) % len(grid), (j+k) % len(grid[0])
            result[row][col] = grid[i][j]

    return result


def shiftGridWithSlicing(grid: List[List[int]], k: int) -> List[List[int]]:
    k = k % (len(grid) * len(grid[0]))
    if k == 0:
        return grid
    arr = []
    for row in grid:
        arr = arr + row

    arr= arr[-k:] + arr[0:len(arr) -k]

    result = []
    for i in range(len(grid)):
        start = i * len(grid[0])
        end = start + len(grid[0])
        result.append(arr[start:end])

    return result


if __name__ == '__main__':
    case = [[600,124,666,656,-99,354,-520,-181,-994,233,361,616,-589,510,-189,955,-927,-598,685,695,647,-157,-876,-62,-182,46,874,-327,677,-584,-187,-814,-224,188,-323,-9,-567,676,-580,190],
            [-808,675,285,651,337,-605,-420,-64,-502,399,178,-576,-552,648,950,447,-13,80,581,-291,-65,927,791,72,409,-271,582,855,201,-444,-825,-169,-329,701,692,-233,589,159,-463,700],
            [315,190,-836,-928,9,-668,-357,-971,33,-442,-119,102,-387,523,-137,844,-399,941,-4,568,56,423,-556,-816,-521,-644,153,-334,-285,-728,552,92,-652,-716,-477,-557,-931,222,731,310],
            [-599,-23,-497,339,729,458,-372,105,416,839,730,-44,-510,-87,-812,249,-969,815,326,-347,-64,981,231,494,-89,-396,973,234,-414,208,774,933,864,308,126,-564,418,677,-67,-108],
            [164,801,-845,341,-21,387,813,-641,463,384,425,-42,-877,965,348,-763,680,424,419,92,-314,-929,-144,-545,-967,-755,329,640,401,822,-523,153,159,-359,-43,629,118,867,910,-985],
            [638,467,-587,-106,314,541,-989,916,-696,388,-988,779,-567,-418,619,750,931,926,-692,-761,565,-314,733,-782,-193,-931,632,398,-650,-984,821,-841,332,-942,130,38,364,-197,495,-177],
            [616,-751,-952,724,549,480,475,24,-726,381,927,-854,-509,-823,-4,366,391,432,44,-889,-484,531,896,455,-839,-270,31,-272,680,995,259,591,-911,399,-611,233,819,-138,460,-690],
            [955,-375,458,439,-746,-475,-465,-427,712,-973,41,-585,136,483,-852,691,-844,552,493,-630,-421,257,-814,-761,401,-418,389,-480,838,885,264,900,-679,-409,842,-593,603,-320,486,315],
            [986,-399,68,541,-463,464,875,-601,514,-692,-543,-735,-21,-704,403,-175,-889,-437,790,-354,-641,-234,-275,168,-13,876,808,-581,-438,-892,-191,469,-165,607,-741,-611,-241,-468,617,-638],
            [695,56,993,-632,-182,-615,-185,831,-549,-713,-630,-673,-241,-913,-811,30,-776,-203,-755,-602,-741,458,-523,-102,819,-208,234,-383,369,-783,113,780,-72,-714,466,788,717,179,995,-565],
            [849,131,117,-96,-414,-970,-349,846,-804,39,-521,-765,702,-509,-660,234,-61,-914,611,-401,-472,630,528,-712,-800,-377,-267,-782,-305,532,303,309,-955,-851,434,888,-513,-959,593,321],
            [-954,-901,-222,-462,-825,-655,492,-235,-457,142,-862,-594,872,230,-968,650,723,-637,775,786,81,-714,-332,621,482,404,-263,-15,907,-251,705,106,-916,-279,660,-973,-506,-174,346,-468],
            [796,-668,150,-82,-276,-503,354,980,-700,-313,-761,-304,-647,-574,-964,-625,912,-300,251,-6,819,-723,-13,128,696,-677,-324,394,159,-591,660,261,458,278,-343,776,-231,737,-816,389],
            [551,-334,-316,-565,285,-849,-432,-327,-61,364,-84,-152,785,751,-178,-113,105,96,708,683,821,-613,808,-112,555,-54,-747,-634,-440,213,-41,-758,459,3,-737,-673,982,-434,-521,169]]
    print(shiftGrid(case, 14))
    print(shiftGridWithSlicing(case, 14))